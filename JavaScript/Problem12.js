/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

const GetTriangleNumber = index => {
	let triangle = 0
	for(let i = 1; i <= index; i++) {
		triangle += i
	}
	return triangle
}

const GetDivisors = dividend => {
	let list = []
	list.push(1)
	for(let i = 2; i < (dividend / 2); i++) {
		if(dividend % i === 0) {
			list.push(1)
		}
	}
	list.push(dividend)
	return list
}

const GetDivisorCount = dividend => {
	let count = 2 //dividend and 1 always divide
	for(let i = 2; i < dividend/2; i++) {
		if(dividend % i === 0) {
			count++
		}
	}
	return count
}

const GetFirstTriangleNumberWithOver = divisorCount => {
	let candidate = 1
	let triangle = GetTriangleNumber(candidate)
	while(GetDivisorCount(triangle) < divisorCount) {
		candidate ++
		triangle = GetTriangleNumber(candidate)
	}
	return triangle
}

console.log(GetFirstTriangleNumberWithOver(500))