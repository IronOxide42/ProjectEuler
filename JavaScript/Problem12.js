/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

const GetTriangleNumber = index => ( (index * (index + 1)) / 2)

const GetDivisors = dividend => {
    let divisors = [] //dividend and 1 always divide
    for(let i = 1; i <= Math.sqrt(dividend); i++) {
        if(dividend % i === 0) {
            divisors.push(i)
            divisors.push(dividend/i)
        }
    }
    divisors.sort((a,b) => a-b)
    return divisors
}

const GetFirstTriangleNumberWithOver = divisorCount => {
    let candidate = 1
    let triangle = GetTriangleNumber(candidate)
    while(GetDivisors(triangle).length < divisorCount) {
        candidate ++
        triangle = GetTriangleNumber(candidate)
    }
    return triangle
}

console.log(GetFirstTriangleNumberWithOver(500))